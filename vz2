package com.verizon.gctss.api.util;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.verizon.gctss.dao.DocumentDMS;
import com.verizon.gctss.dao.E2EContractDAO;
import com.verizon.gctss.dao.model.CurrencyDTO;
import com.verizon.gctss.model.PQCurrency;
import com.verizon.gctss.model.PQResponse;
import com.verizon.gctss.model.SearchCriteria;
import com.verizon.gctss.model.ZVLERequest;
import com.verizon.gctss.messaging.util.InterfaceConstants;

class PQLookupServiceTest {

    @InjectMocks
    private PQLookupService pqLookupService;

    @Mock
    private DocumentDMS dmsService;

    @Mock
    private E2EContractDAO e2EContractDAO;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private LogIncomingOutgoingUtil logIncomingOutgoingUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetPQDataByVLEIDAndVLECountry_Success() throws Exception {
        // Arrange
        String vleId = "123";
        String vleCountryCode = "US";
        String amendmentId = "456";

        String url = "http://mockedurl.com";
        String apiKey = "mockedApiKey";

        when(dmsService.getPreferenceValue(anyString()))
                .thenReturn(url)  // First call for URL
                .thenReturn(apiKey);  // Second call for API key

        PQResponse.VZVLEResponse vzvleResponse = new PQResponse.VZVLEResponse();
        vzvleResponse.setStatus("SUCCESS");
        vzvleResponse.setSourceSystem("QQ");
        vzvleResponse.setResultSet(new PQResponse.VZVLEResponse.ResultSet());
        vzvleResponse.getResultSet().setLegalEntity("MockEntity");
        vzvleResponse.getResultSet().setLocalCurrency(Collections.singletonList("USD"));

        PQResponse response = new PQResponse();
        response.setGetVZVLEResponse(vzvleResponse);

        ResponseEntity<PQResponse> responseEntity = ResponseEntity.ok(response);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(PQResponse.class)))
                .thenReturn(responseEntity);

        CurrencyDTO currencyDTO = new CurrencyDTO();
        currencyDTO.setCode("USD");
        currencyDTO.setName("US Dollar");
        when(e2EContractDAO.findCurrenciesByCodes(anyList()))
                .thenReturn(Collections.singletonList(currencyDTO));

        // Act
        PQCurrency result = pqLookupService.getPQDataByVLEIDAndVLECountry(vleId, vleCountryCode, amendmentId);

        // Assert
        assert result != null;
        assert "SUCCESS".equals(result.getStatus());
        assert "QQ".equals(result.getSourceSystem());
        assert "MockEntity".equals(result.getLegalEntity());
        assert result.getCurrencies() != null && !result.getCurrencies().isEmpty();
        assert "200".equals(result.getCode());

        verify(dmsService, times(2)).getPreferenceValue(anyString());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(PQResponse.class));
        verify(e2EContractDAO, times(1)).findCurrenciesByCodes(anyList());
    }

    @Test
    void testGetPQDataByVLEIDAndVLECountry_ErrorHandling() throws Exception {
        // Arrange
        String vleId = "123";
        String vleCountryCode = "US";
        String amendmentId = "456";

        String url = "http://mockedurl.com";
        String apiKey = "mockedApiKey";

        when(dmsService.getPreferenceValue(anyString()))
                .thenReturn(url)  // First call for URL
                .thenReturn(apiKey);  // Second call for API key

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(PQResponse.class)))
                .thenThrow(new RuntimeException("RestTemplate exception"));

        // Act
        PQCurrency result = pqLookupService.getPQDataByVLEIDAndVLECountry(vleId, vleCountryCode, amendmentId);

        // Assert
        assert result != null;
        assert "500".equals(result.getCode());
        assert "https://atyourservice.verizon.com/ays?id=support&search=proquest".equals(result.getErrorLink());
        assert result.getErrorDescription() != null;

        verify(dmsService, times(2)).getPreferenceValue(anyString());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(PQResponse.class));
    }
}