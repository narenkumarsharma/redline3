package com.verizon.gctss.api.util;

import static org.mockito.Mockito.*;

import java.net.HttpURLConnection;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.verizon.gctss.dao.E2EContractDAO;

class GctToGchContractUpdateTest {

    @InjectMocks
    private GctToGchContractUpdate gctToGchContractUpdate;

    @Mock
    private E2EContractDAO e2eContractDAO;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testBuildCreateGCHUpdationRequest() {
        // Given
        String legalDocId = "DOC123";
        boolean isReady4Q2C = true;
        boolean isPeUpload = false;

        // When
        CreateGCHUpdationRequest request = gctToGchContractUpdate.buildcreateGCHUpdationRequest(legalDocId, isReady4Q2C, isPeUpload);

        // Then
        assert request != null;
        assert "SS".equals(request.getSystem());
        assert legalDocId.equals(request.getLegalDocId());
        assert isReady4Q2C == request.isReady4Q2C();
        assert isPeUpload == request.isPeUpload();
    }

    @Test
    void testSendContractStatusUpdateJMSMessageToGCH() {
        // Given
        String legalDocId = "DOC123";
        boolean isReady4Q2C = true;
        boolean isPeUpload = false;

        when(e2eContractDAO.getPreferenceValue(anyString())).thenReturn("http://dummyurl.com");

        // Mock the behavior of postGCHContractUpdationRestMessage
        GctToGchContractUpdate spy = spy(gctToGchContractUpdate);
        doReturn("{\"statusCode\":\"200\"}").when(spy).postGCHContractUpdationRestMessage(anyString(), anyString(), anyLong());

        // When
        spy.sendContractStatusUpdateJMSMessageToGCH(legalDocId, isReady4Q2C, isPeUpload);

        // Then
        verify(spy, times(1)).postGCHContractUpdationRestMessage(anyString(), eq(legalDocId), anyLong());
    }

    @Test
    void testPostGCHContractUpdationRestMessage() throws Exception {
        // Given
        String requestJson = "{\"key\":\"value\"}";
        String legalDocId = "DOC123";
        long transID = 12345L;

        String dummyUrl = "http://dummyurl.com";
        when(e2eContractDAO.getPreferenceValue(anyString())).thenReturn(dummyUrl);

        // Simulate HttpURLConnection
        HttpURLConnection connection = mock(HttpURLConnection.class);
        when(connection.getResponseCode()).thenReturn(200);
        when(connection.getInputStream()).thenReturn(new java.io.ByteArrayInputStream("{\"statusCode\":\"200\"}".getBytes()));

        GctToGchContractUpdate spy = spy(gctToGchContractUpdate);
        doReturn(connection).when(spy).createHttpURLConnection(any());

        // When
        String response = spy.postGCHContractUpdationRestMessage(requestJson, legalDocId, transID);

        // Then
        assert response.contains("statusCode");
        verify(e2eContractDAO, times(2)).getPreferenceValue(anyString());
    }

    @Test
    void testPostGCHContractUpdationRestMessageWithError() throws Exception {
        // Given
        String requestJson = "{\"key\":\"value\"}";
        String legalDocId = "DOC123";
        long transID = 12345L;

        String dummyUrl = "http://dummyurl.com";
        when(e2eContractDAO.getPreferenceValue(anyString())).thenReturn(dummyUrl);

        HttpURLConnection connection = mock(HttpURLConnection.class);
        when(connection.getResponseCode()).thenReturn(500);
        when(connection.getResponseMessage()).thenReturn("Internal Server Error");

        GctToGchContractUpdate spy = spy(gctToGchContractUpdate);
        doReturn(connection).when(spy).createHttpURLConnection(any());

        // When
        String response = spy.postGCHContractUpdationRestMessage(requestJson, legalDocId, transID);

        // Then
        assert response.isEmpty();
        verify(e2eContractDAO, times(2)).getPreferenceValue(anyString());
    }
}