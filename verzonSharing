package com.verizon.gctss.api.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.verizon.gctss.dao.E2EContractDAO;
import com.verizon.gctss.dao.common.util.SecuritySolnUtil;
import com.verizon.gctss.model.json.JSONObject;

@SuppressWarnings({ "rawtypes", "unchecked" })
@Service
public class GctToGchContractUpdate {

	private static final Logger logger = LogManager.getLogger(GctToGchContractUpdate.class);

	@Lazy
	@Autowired
	private E2EContractDAO e2eContractDAO;

	public void sendContractStatusUpdateJMSMessageToGCH(String legalDocId, boolean isReady4Q2C, boolean isPeUpload) {
		String methodName = "sendContractStatusUpdateJMSMessageToGCH";
		String gchResponse = null;
		String statusCode = null;
		CreateGCHUpdationRequest createGCHUpdationRequest = null;
		try {
			logger.info(methodName + "::legalDocId start :: " + legalDocId);
			createGCHUpdationRequest = buildcreateGCHUpdationRequest(legalDocId, isReady4Q2C, isReady4Q2C);
			ObjectMapper objectMapper = new ObjectMapper();
			String requestJson = objectMapper.writeValueAsString(createGCHUpdationRequest);
			logger.info(methodName + " Using rest service for GCHContractUpdatiob requestJson::" + requestJson);
			gchResponse = postGCHContractUpdationRestMessage(requestJson, legalDocId,
					new Long(System.currentTimeMillis()));
			JSONObject jsonObject = new JSONObject(gchResponse.toString());
			statusCode = jsonObject.get("statusCode").toString();
			logger.info(methodName+"statusCode for response"+statusCode);
		} catch (Exception e) {
			logger.error(methodName + ExceptionUtils.getFullStackTrace(e));
		}
	}

	public CreateGCHUpdationRequest buildcreateGCHUpdationRequest(String legalDocId, boolean isReady4Q2C,
			boolean isPeUpload) {
		String methodName = "sendGCHTaxValidation";
		CreateGCHUpdationRequest gCHUpdationRequest = new CreateGCHUpdationRequest();
		try {
			if (null != legalDocId) {
				gCHUpdationRequest.setSystem("SS");
				gCHUpdationRequest.setTransId(new Long(System.currentTimeMillis()).toString());
				gCHUpdationRequest.setTransTime((new Date()).toString());
				gCHUpdationRequest.setLegalDocId(legalDocId);
				gCHUpdationRequest.setPeUpload(isPeUpload);
				gCHUpdationRequest.setReady4Q2C(isReady4Q2C);
			}

		} catch (Exception e) {
			logger.error(ExceptionUtils.getFullStackTrace(e));
		}
		logger.info(methodName + ", ends");
		return gCHUpdationRequest;

	}

	public String postGCHContractUpdationRestMessage(String requestJson, String legalDocId, long transID) {

		URL url = null;
		HttpURLConnection conn = null;
		BufferedReader rd = null;
		StringBuilder sb = new StringBuilder();
		try {

			String gchRestUrl = e2eContractDAO
					.getPreferenceValue(com.verizon.gctss.dao.common.EDMConstants.GCH_CONTRACT_UPDATION_URL);
			logger.info("GCT trying to connect GCH " + gchRestUrl);
			url = new URL(gchRestUrl);
			logger.info("Connected.");
		} catch (MalformedURLException e) {
			logger.error("Error: ", e);
		}
		try {
			if (url != null) {
				logger.info("GCH_JSON" + requestJson);
				conn = (HttpURLConnection) url.openConnection();
				logger.info("Step = 1");
				conn.setRequestMethod("POST");
				logger.info("Step = 2");
				conn.setDoOutput(true);
				logger.info("Step = 3");
				conn.setDoInput(true);
				logger.info("Step = 4");
				String gchContentType = e2eContractDAO
						.getPreferenceValue(com.verizon.gctss.dao.common.EDMConstants.GCH_CONTRACT_UPDATION_TYPE);
				if (StringUtils.isBlank(gchContentType)) {
					gchContentType = "application/json";
				}
				gchContentType = SecuritySolnUtil.sanitizeHeader(gchContentType);
				conn.setRequestProperty("Content-Type", gchContentType);
				logger.info("Content_Type-" + gchContentType);
				logger.info("Step = 5");
				conn.setRequestProperty("Accept", "application/json");
				logger.info("Step = 6");
				conn.setDoOutput(true);
				logger.info("Step = 7 " + requestJson);
				OutputStream os = conn.getOutputStream();
				os.write(requestJson.getBytes());
				logger.info("Step = 8");
				os.flush();
				logger.info("Step = 9");
				os.close();
				logger.info("Step = 10");
				if (conn.getResponseCode() != 200) {
					logger.info("Step = Some thing went wrong" + conn.getResponseMessage());
					throw new IOException(conn.getResponseMessage());
				}
				rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
				String line;

				while ((line = rd.readLine()) != null) {
					sb.append(line);
				}
				rd.close();
				logger.info("Step = 11" + sb.toString());
				logger.info("postGCHTAXVALRestMessage response = " + sb.toString());
			}
		} catch (IOException e) {
			logger.error("Error: ", e);
			logger.error("ERROR", e);
		} finally {
			try {
				if (conn != null) {
					conn.disconnect();
				}
			} catch (Exception e) {
				logger.error("Error: ", e);
			}
		}
		return sb.toString();

	}

}
